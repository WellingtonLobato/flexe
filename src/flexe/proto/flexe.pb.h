// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flexe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flexe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flexe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flexe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flexe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flexe_2eproto;
namespace flexe {
class AggregationRequest;
struct AggregationRequestDefaultTypeInternal;
extern AggregationRequestDefaultTypeInternal _AggregationRequest_default_instance_;
class GenericReply;
struct GenericReplyDefaultTypeInternal;
extern GenericReplyDefaultTypeInternal _GenericReply_default_instance_;
class GenericRequest;
struct GenericRequestDefaultTypeInternal;
extern GenericRequestDefaultTypeInternal _GenericRequest_default_instance_;
class ModelReply;
struct ModelReplyDefaultTypeInternal;
extern ModelReplyDefaultTypeInternal _ModelReply_default_instance_;
class TTRequest;
struct TTRequestDefaultTypeInternal;
extern TTRequestDefaultTypeInternal _TTRequest_default_instance_;
}  // namespace flexe
PROTOBUF_NAMESPACE_OPEN
template<> ::flexe::AggregationRequest* Arena::CreateMaybeMessage<::flexe::AggregationRequest>(Arena*);
template<> ::flexe::GenericReply* Arena::CreateMaybeMessage<::flexe::GenericReply>(Arena*);
template<> ::flexe::GenericRequest* Arena::CreateMaybeMessage<::flexe::GenericRequest>(Arena*);
template<> ::flexe::ModelReply* Arena::CreateMaybeMessage<::flexe::ModelReply>(Arena*);
template<> ::flexe::TTRequest* Arena::CreateMaybeMessage<::flexe::TTRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flexe {

// ===================================================================

class TTRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flexe.TTRequest) */ {
 public:
  inline TTRequest() : TTRequest(nullptr) {}
  ~TTRequest() override;
  explicit constexpr TTRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TTRequest(const TTRequest& from);
  TTRequest(TTRequest&& from) noexcept
    : TTRequest() {
    *this = ::std::move(from);
  }

  inline TTRequest& operator=(const TTRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTRequest& operator=(TTRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TTRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TTRequest* internal_default_instance() {
    return reinterpret_cast<const TTRequest*>(
               &_TTRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TTRequest& a, TTRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TTRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTRequest* New() const final {
    return new TTRequest();
  }

  TTRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTRequest& from);
  void MergeFrom(const TTRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flexe.TTRequest";
  }
  protected:
  explicit TTRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kDatasetFieldNumber = 3,
    kScenarioFieldNumber = 4,
    kModelsFieldNumber = 13,
    kMsgFieldNumber = 14,
    kIdEntityFieldNumber = 1,
    kSeedFieldNumber = 5,
    kIdModelFieldNumber = 7,
    kNonIIDFieldNumber = 6,
    kTrainFlagFieldNumber = 8,
    kEpochsFieldNumber = 9,
    kBatchFieldNumber = 10,
    kPercentDatasetFieldNumber = 12,
    kNumClientsFieldNumber = 11,
  };
  // string model = 2;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string dataset = 3;
  void clear_dataset();
  const std::string& dataset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_dataset();
  void set_allocated_dataset(std::string* dataset);
  private:
  const std::string& _internal_dataset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset(const std::string& value);
  std::string* _internal_mutable_dataset();
  public:

  // string scenario = 4;
  void clear_scenario();
  const std::string& scenario() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scenario(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scenario();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scenario();
  void set_allocated_scenario(std::string* scenario);
  private:
  const std::string& _internal_scenario() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scenario(const std::string& value);
  std::string* _internal_mutable_scenario();
  public:

  // string models = 13;
  void clear_models();
  const std::string& models() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_models(ArgT0&& arg0, ArgT... args);
  std::string* mutable_models();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_models();
  void set_allocated_models(std::string* models);
  private:
  const std::string& _internal_models() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_models(const std::string& value);
  std::string* _internal_mutable_models();
  public:

  // string msg = 14;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 idEntity = 1;
  void clear_identity();
  ::PROTOBUF_NAMESPACE_ID::int32 identity() const;
  void set_identity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_identity() const;
  void _internal_set_identity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seed = 5;
  void clear_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seed() const;
  void _internal_set_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 idModel = 7;
  void clear_idmodel();
  ::PROTOBUF_NAMESPACE_ID::int32 idmodel() const;
  void set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idmodel() const;
  void _internal_set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool nonIID = 6;
  void clear_noniid();
  bool noniid() const;
  void set_noniid(bool value);
  private:
  bool _internal_noniid() const;
  void _internal_set_noniid(bool value);
  public:

  // bool trainFlag = 8;
  void clear_trainflag();
  bool trainflag() const;
  void set_trainflag(bool value);
  private:
  bool _internal_trainflag() const;
  void _internal_set_trainflag(bool value);
  public:

  // int32 epochs = 9;
  void clear_epochs();
  ::PROTOBUF_NAMESPACE_ID::int32 epochs() const;
  void set_epochs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epochs() const;
  void _internal_set_epochs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 batch = 10;
  void clear_batch();
  ::PROTOBUF_NAMESPACE_ID::int32 batch() const;
  void set_batch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batch() const;
  void _internal_set_batch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double percentDataset = 12;
  void clear_percentdataset();
  double percentdataset() const;
  void set_percentdataset(double value);
  private:
  double _internal_percentdataset() const;
  void _internal_set_percentdataset(double value);
  public:

  // int32 numClients = 11;
  void clear_numclients();
  ::PROTOBUF_NAMESPACE_ID::int32 numclients() const;
  void set_numclients(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numclients() const;
  void _internal_set_numclients(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:flexe.TTRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenario_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr models_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 identity_;
  ::PROTOBUF_NAMESPACE_ID::int32 seed_;
  ::PROTOBUF_NAMESPACE_ID::int32 idmodel_;
  bool noniid_;
  bool trainflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 epochs_;
  ::PROTOBUF_NAMESPACE_ID::int32 batch_;
  double percentdataset_;
  ::PROTOBUF_NAMESPACE_ID::int32 numclients_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flexe_2eproto;
};
// -------------------------------------------------------------------

class AggregationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flexe.AggregationRequest) */ {
 public:
  inline AggregationRequest() : AggregationRequest(nullptr) {}
  ~AggregationRequest() override;
  explicit constexpr AggregationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregationRequest(const AggregationRequest& from);
  AggregationRequest(AggregationRequest&& from) noexcept
    : AggregationRequest() {
    *this = ::std::move(from);
  }

  inline AggregationRequest& operator=(const AggregationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregationRequest& operator=(AggregationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregationRequest* internal_default_instance() {
    return reinterpret_cast<const AggregationRequest*>(
               &_AggregationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AggregationRequest& a, AggregationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregationRequest* New() const final {
    return new AggregationRequest();
  }

  AggregationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregationRequest& from);
  void MergeFrom(const AggregationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flexe.AggregationRequest";
  }
  protected:
  explicit AggregationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kDatasetFieldNumber = 3,
    kScenarioFieldNumber = 4,
    kNumExamplesFieldNumber = 9,
    kModelsFieldNumber = 10,
    kStrategyFieldNumber = 11,
    kMsgFieldNumber = 12,
    kIdEntityFieldNumber = 1,
    kSeedFieldNumber = 5,
    kNonIIDFieldNumber = 6,
    kIdModelFieldNumber = 7,
    kNumClientsFieldNumber = 8,
  };
  // string model = 2;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string dataset = 3;
  void clear_dataset();
  const std::string& dataset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_dataset();
  void set_allocated_dataset(std::string* dataset);
  private:
  const std::string& _internal_dataset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset(const std::string& value);
  std::string* _internal_mutable_dataset();
  public:

  // string scenario = 4;
  void clear_scenario();
  const std::string& scenario() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scenario(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scenario();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scenario();
  void set_allocated_scenario(std::string* scenario);
  private:
  const std::string& _internal_scenario() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scenario(const std::string& value);
  std::string* _internal_mutable_scenario();
  public:

  // string numExamples = 9;
  void clear_numexamples();
  const std::string& numexamples() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_numexamples(ArgT0&& arg0, ArgT... args);
  std::string* mutable_numexamples();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_numexamples();
  void set_allocated_numexamples(std::string* numexamples);
  private:
  const std::string& _internal_numexamples() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_numexamples(const std::string& value);
  std::string* _internal_mutable_numexamples();
  public:

  // string models = 10;
  void clear_models();
  const std::string& models() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_models(ArgT0&& arg0, ArgT... args);
  std::string* mutable_models();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_models();
  void set_allocated_models(std::string* models);
  private:
  const std::string& _internal_models() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_models(const std::string& value);
  std::string* _internal_mutable_models();
  public:

  // string strategy = 11;
  void clear_strategy();
  const std::string& strategy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strategy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strategy();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strategy();
  void set_allocated_strategy(std::string* strategy);
  private:
  const std::string& _internal_strategy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategy(const std::string& value);
  std::string* _internal_mutable_strategy();
  public:

  // string msg = 12;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 idEntity = 1;
  void clear_identity();
  ::PROTOBUF_NAMESPACE_ID::int32 identity() const;
  void set_identity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_identity() const;
  void _internal_set_identity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seed = 5;
  void clear_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seed() const;
  void _internal_set_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool nonIID = 6;
  void clear_noniid();
  bool noniid() const;
  void set_noniid(bool value);
  private:
  bool _internal_noniid() const;
  void _internal_set_noniid(bool value);
  public:

  // int32 idModel = 7;
  void clear_idmodel();
  ::PROTOBUF_NAMESPACE_ID::int32 idmodel() const;
  void set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idmodel() const;
  void _internal_set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 numClients = 8;
  void clear_numclients();
  ::PROTOBUF_NAMESPACE_ID::int32 numclients() const;
  void set_numclients(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numclients() const;
  void _internal_set_numclients(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:flexe.AggregationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenario_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr numexamples_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr models_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strategy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 identity_;
  ::PROTOBUF_NAMESPACE_ID::int32 seed_;
  bool noniid_;
  ::PROTOBUF_NAMESPACE_ID::int32 idmodel_;
  ::PROTOBUF_NAMESPACE_ID::int32 numclients_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flexe_2eproto;
};
// -------------------------------------------------------------------

class GenericRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flexe.GenericRequest) */ {
 public:
  inline GenericRequest() : GenericRequest(nullptr) {}
  ~GenericRequest() override;
  explicit constexpr GenericRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericRequest(const GenericRequest& from);
  GenericRequest(GenericRequest&& from) noexcept
    : GenericRequest() {
    *this = ::std::move(from);
  }

  inline GenericRequest& operator=(const GenericRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericRequest& operator=(GenericRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericRequest* internal_default_instance() {
    return reinterpret_cast<const GenericRequest*>(
               &_GenericRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GenericRequest& a, GenericRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericRequest* New() const final {
    return new GenericRequest();
  }

  GenericRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericRequest& from);
  void MergeFrom(const GenericRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flexe.GenericRequest";
  }
  protected:
  explicit GenericRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kDatasetFieldNumber = 3,
    kScenarioFieldNumber = 4,
    kMsgFieldNumber = 8,
    kIdEntityFieldNumber = 1,
    kSeedFieldNumber = 5,
    kNonIIDFieldNumber = 6,
    kIdModelFieldNumber = 7,
  };
  // string model = 2;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string dataset = 3;
  void clear_dataset();
  const std::string& dataset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_dataset();
  void set_allocated_dataset(std::string* dataset);
  private:
  const std::string& _internal_dataset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset(const std::string& value);
  std::string* _internal_mutable_dataset();
  public:

  // string scenario = 4;
  void clear_scenario();
  const std::string& scenario() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scenario(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scenario();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scenario();
  void set_allocated_scenario(std::string* scenario);
  private:
  const std::string& _internal_scenario() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scenario(const std::string& value);
  std::string* _internal_mutable_scenario();
  public:

  // string msg = 8;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 idEntity = 1;
  void clear_identity();
  ::PROTOBUF_NAMESPACE_ID::int32 identity() const;
  void set_identity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_identity() const;
  void _internal_set_identity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seed = 5;
  void clear_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seed() const;
  void _internal_set_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool nonIID = 6;
  void clear_noniid();
  bool noniid() const;
  void set_noniid(bool value);
  private:
  bool _internal_noniid() const;
  void _internal_set_noniid(bool value);
  public:

  // int32 idModel = 7;
  void clear_idmodel();
  ::PROTOBUF_NAMESPACE_ID::int32 idmodel() const;
  void set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idmodel() const;
  void _internal_set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:flexe.GenericRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenario_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 identity_;
  ::PROTOBUF_NAMESPACE_ID::int32 seed_;
  bool noniid_;
  ::PROTOBUF_NAMESPACE_ID::int32 idmodel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flexe_2eproto;
};
// -------------------------------------------------------------------

class GenericReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flexe.GenericReply) */ {
 public:
  inline GenericReply() : GenericReply(nullptr) {}
  ~GenericReply() override;
  explicit constexpr GenericReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericReply(const GenericReply& from);
  GenericReply(GenericReply&& from) noexcept
    : GenericReply() {
    *this = ::std::move(from);
  }

  inline GenericReply& operator=(const GenericReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericReply& operator=(GenericReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericReply* internal_default_instance() {
    return reinterpret_cast<const GenericReply*>(
               &_GenericReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GenericReply& a, GenericReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericReply* New() const final {
    return new GenericReply();
  }

  GenericReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericReply& from);
  void MergeFrom(const GenericReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flexe.GenericReply";
  }
  protected:
  explicit GenericReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kDatasetFieldNumber = 3,
    kScenarioFieldNumber = 4,
    kMsgFieldNumber = 9,
    kIdEntityFieldNumber = 1,
    kSeedFieldNumber = 5,
    kNonIIDFieldNumber = 6,
    kIdModelFieldNumber = 7,
    kReplyFieldNumber = 8,
  };
  // string model = 2;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string dataset = 3;
  void clear_dataset();
  const std::string& dataset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_dataset();
  void set_allocated_dataset(std::string* dataset);
  private:
  const std::string& _internal_dataset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset(const std::string& value);
  std::string* _internal_mutable_dataset();
  public:

  // string scenario = 4;
  void clear_scenario();
  const std::string& scenario() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scenario(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scenario();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scenario();
  void set_allocated_scenario(std::string* scenario);
  private:
  const std::string& _internal_scenario() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scenario(const std::string& value);
  std::string* _internal_mutable_scenario();
  public:

  // string msg = 9;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 idEntity = 1;
  void clear_identity();
  ::PROTOBUF_NAMESPACE_ID::int32 identity() const;
  void set_identity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_identity() const;
  void _internal_set_identity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seed = 5;
  void clear_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seed() const;
  void _internal_set_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool nonIID = 6;
  void clear_noniid();
  bool noniid() const;
  void set_noniid(bool value);
  private:
  bool _internal_noniid() const;
  void _internal_set_noniid(bool value);
  public:

  // int32 idModel = 7;
  void clear_idmodel();
  ::PROTOBUF_NAMESPACE_ID::int32 idmodel() const;
  void set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idmodel() const;
  void _internal_set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reply = 8;
  void clear_reply();
  ::PROTOBUF_NAMESPACE_ID::int32 reply() const;
  void set_reply(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reply() const;
  void _internal_set_reply(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:flexe.GenericReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenario_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 identity_;
  ::PROTOBUF_NAMESPACE_ID::int32 seed_;
  bool noniid_;
  ::PROTOBUF_NAMESPACE_ID::int32 idmodel_;
  ::PROTOBUF_NAMESPACE_ID::int32 reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flexe_2eproto;
};
// -------------------------------------------------------------------

class ModelReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flexe.ModelReply) */ {
 public:
  inline ModelReply() : ModelReply(nullptr) {}
  ~ModelReply() override;
  explicit constexpr ModelReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelReply(const ModelReply& from);
  ModelReply(ModelReply&& from) noexcept
    : ModelReply() {
    *this = ::std::move(from);
  }

  inline ModelReply& operator=(const ModelReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelReply& operator=(ModelReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelReply* internal_default_instance() {
    return reinterpret_cast<const ModelReply*>(
               &_ModelReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModelReply& a, ModelReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelReply* New() const final {
    return new ModelReply();
  }

  ModelReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelReply& from);
  void MergeFrom(const ModelReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flexe.ModelReply";
  }
  protected:
  explicit ModelReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kDatasetFieldNumber = 3,
    kScenarioFieldNumber = 4,
    kMsgFieldNumber = 12,
    kIdEntityFieldNumber = 1,
    kSeedFieldNumber = 5,
    kNonIIDFieldNumber = 6,
    kIdModelFieldNumber = 7,
    kEntropyFieldNumber = 9,
    kLossFieldNumber = 10,
    kAccuracyFieldNumber = 11,
    kNumExamplesFieldNumber = 8,
  };
  // string model = 2;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string dataset = 3;
  void clear_dataset();
  const std::string& dataset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_dataset();
  void set_allocated_dataset(std::string* dataset);
  private:
  const std::string& _internal_dataset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset(const std::string& value);
  std::string* _internal_mutable_dataset();
  public:

  // string scenario = 4;
  void clear_scenario();
  const std::string& scenario() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scenario(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scenario();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_scenario();
  void set_allocated_scenario(std::string* scenario);
  private:
  const std::string& _internal_scenario() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scenario(const std::string& value);
  std::string* _internal_mutable_scenario();
  public:

  // string msg = 12;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 idEntity = 1;
  void clear_identity();
  ::PROTOBUF_NAMESPACE_ID::int32 identity() const;
  void set_identity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_identity() const;
  void _internal_set_identity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seed = 5;
  void clear_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seed() const;
  void _internal_set_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool nonIID = 6;
  void clear_noniid();
  bool noniid() const;
  void set_noniid(bool value);
  private:
  bool _internal_noniid() const;
  void _internal_set_noniid(bool value);
  public:

  // int32 idModel = 7;
  void clear_idmodel();
  ::PROTOBUF_NAMESPACE_ID::int32 idmodel() const;
  void set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idmodel() const;
  void _internal_set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double entropy = 9;
  void clear_entropy();
  double entropy() const;
  void set_entropy(double value);
  private:
  double _internal_entropy() const;
  void _internal_set_entropy(double value);
  public:

  // double loss = 10;
  void clear_loss();
  double loss() const;
  void set_loss(double value);
  private:
  double _internal_loss() const;
  void _internal_set_loss(double value);
  public:

  // double accuracy = 11;
  void clear_accuracy();
  double accuracy() const;
  void set_accuracy(double value);
  private:
  double _internal_accuracy() const;
  void _internal_set_accuracy(double value);
  public:

  // int32 numExamples = 8;
  void clear_numexamples();
  ::PROTOBUF_NAMESPACE_ID::int32 numexamples() const;
  void set_numexamples(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numexamples() const;
  void _internal_set_numexamples(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:flexe.ModelReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenario_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 identity_;
  ::PROTOBUF_NAMESPACE_ID::int32 seed_;
  bool noniid_;
  ::PROTOBUF_NAMESPACE_ID::int32 idmodel_;
  double entropy_;
  double loss_;
  double accuracy_;
  ::PROTOBUF_NAMESPACE_ID::int32 numexamples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flexe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TTRequest

// int32 idEntity = 1;
inline void TTRequest::clear_identity() {
  identity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TTRequest::_internal_identity() const {
  return identity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TTRequest::identity() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.idEntity)
  return _internal_identity();
}
inline void TTRequest::_internal_set_identity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  identity_ = value;
}
inline void TTRequest::set_identity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_identity(value);
  // @@protoc_insertion_point(field_set:flexe.TTRequest.idEntity)
}

// string model = 2;
inline void TTRequest::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& TTRequest::model() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TTRequest::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.TTRequest.model)
}
inline std::string* TTRequest::mutable_model() {
  // @@protoc_insertion_point(field_mutable:flexe.TTRequest.model)
  return _internal_mutable_model();
}
inline const std::string& TTRequest::_internal_model() const {
  return model_.Get();
}
inline void TTRequest::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TTRequest::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TTRequest::release_model() {
  // @@protoc_insertion_point(field_release:flexe.TTRequest.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TTRequest::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.TTRequest.model)
}

// string dataset = 3;
inline void TTRequest::clear_dataset() {
  dataset_.ClearToEmpty();
}
inline const std::string& TTRequest::dataset() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.dataset)
  return _internal_dataset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TTRequest::set_dataset(ArgT0&& arg0, ArgT... args) {
 
 dataset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.TTRequest.dataset)
}
inline std::string* TTRequest::mutable_dataset() {
  // @@protoc_insertion_point(field_mutable:flexe.TTRequest.dataset)
  return _internal_mutable_dataset();
}
inline const std::string& TTRequest::_internal_dataset() const {
  return dataset_.Get();
}
inline void TTRequest::_internal_set_dataset(const std::string& value) {
  
  dataset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TTRequest::_internal_mutable_dataset() {
  
  return dataset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TTRequest::release_dataset() {
  // @@protoc_insertion_point(field_release:flexe.TTRequest.dataset)
  return dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TTRequest::set_allocated_dataset(std::string* dataset) {
  if (dataset != nullptr) {
    
  } else {
    
  }
  dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.TTRequest.dataset)
}

// string scenario = 4;
inline void TTRequest::clear_scenario() {
  scenario_.ClearToEmpty();
}
inline const std::string& TTRequest::scenario() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.scenario)
  return _internal_scenario();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TTRequest::set_scenario(ArgT0&& arg0, ArgT... args) {
 
 scenario_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.TTRequest.scenario)
}
inline std::string* TTRequest::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:flexe.TTRequest.scenario)
  return _internal_mutable_scenario();
}
inline const std::string& TTRequest::_internal_scenario() const {
  return scenario_.Get();
}
inline void TTRequest::_internal_set_scenario(const std::string& value) {
  
  scenario_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TTRequest::_internal_mutable_scenario() {
  
  return scenario_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TTRequest::release_scenario() {
  // @@protoc_insertion_point(field_release:flexe.TTRequest.scenario)
  return scenario_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TTRequest::set_allocated_scenario(std::string* scenario) {
  if (scenario != nullptr) {
    
  } else {
    
  }
  scenario_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenario,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.TTRequest.scenario)
}

// int32 seed = 5;
inline void TTRequest::clear_seed() {
  seed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TTRequest::_internal_seed() const {
  return seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TTRequest::seed() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.seed)
  return _internal_seed();
}
inline void TTRequest::_internal_set_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seed_ = value;
}
inline void TTRequest::set_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:flexe.TTRequest.seed)
}

// bool nonIID = 6;
inline void TTRequest::clear_noniid() {
  noniid_ = false;
}
inline bool TTRequest::_internal_noniid() const {
  return noniid_;
}
inline bool TTRequest::noniid() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.nonIID)
  return _internal_noniid();
}
inline void TTRequest::_internal_set_noniid(bool value) {
  
  noniid_ = value;
}
inline void TTRequest::set_noniid(bool value) {
  _internal_set_noniid(value);
  // @@protoc_insertion_point(field_set:flexe.TTRequest.nonIID)
}

// int32 idModel = 7;
inline void TTRequest::clear_idmodel() {
  idmodel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TTRequest::_internal_idmodel() const {
  return idmodel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TTRequest::idmodel() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.idModel)
  return _internal_idmodel();
}
inline void TTRequest::_internal_set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idmodel_ = value;
}
inline void TTRequest::set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idmodel(value);
  // @@protoc_insertion_point(field_set:flexe.TTRequest.idModel)
}

// bool trainFlag = 8;
inline void TTRequest::clear_trainflag() {
  trainflag_ = false;
}
inline bool TTRequest::_internal_trainflag() const {
  return trainflag_;
}
inline bool TTRequest::trainflag() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.trainFlag)
  return _internal_trainflag();
}
inline void TTRequest::_internal_set_trainflag(bool value) {
  
  trainflag_ = value;
}
inline void TTRequest::set_trainflag(bool value) {
  _internal_set_trainflag(value);
  // @@protoc_insertion_point(field_set:flexe.TTRequest.trainFlag)
}

// int32 epochs = 9;
inline void TTRequest::clear_epochs() {
  epochs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TTRequest::_internal_epochs() const {
  return epochs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TTRequest::epochs() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.epochs)
  return _internal_epochs();
}
inline void TTRequest::_internal_set_epochs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  epochs_ = value;
}
inline void TTRequest::set_epochs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epochs(value);
  // @@protoc_insertion_point(field_set:flexe.TTRequest.epochs)
}

// int32 batch = 10;
inline void TTRequest::clear_batch() {
  batch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TTRequest::_internal_batch() const {
  return batch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TTRequest::batch() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.batch)
  return _internal_batch();
}
inline void TTRequest::_internal_set_batch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batch_ = value;
}
inline void TTRequest::set_batch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batch(value);
  // @@protoc_insertion_point(field_set:flexe.TTRequest.batch)
}

// int32 numClients = 11;
inline void TTRequest::clear_numclients() {
  numclients_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TTRequest::_internal_numclients() const {
  return numclients_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TTRequest::numclients() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.numClients)
  return _internal_numclients();
}
inline void TTRequest::_internal_set_numclients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numclients_ = value;
}
inline void TTRequest::set_numclients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numclients(value);
  // @@protoc_insertion_point(field_set:flexe.TTRequest.numClients)
}

// double percentDataset = 12;
inline void TTRequest::clear_percentdataset() {
  percentdataset_ = 0;
}
inline double TTRequest::_internal_percentdataset() const {
  return percentdataset_;
}
inline double TTRequest::percentdataset() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.percentDataset)
  return _internal_percentdataset();
}
inline void TTRequest::_internal_set_percentdataset(double value) {
  
  percentdataset_ = value;
}
inline void TTRequest::set_percentdataset(double value) {
  _internal_set_percentdataset(value);
  // @@protoc_insertion_point(field_set:flexe.TTRequest.percentDataset)
}

// string models = 13;
inline void TTRequest::clear_models() {
  models_.ClearToEmpty();
}
inline const std::string& TTRequest::models() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.models)
  return _internal_models();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TTRequest::set_models(ArgT0&& arg0, ArgT... args) {
 
 models_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.TTRequest.models)
}
inline std::string* TTRequest::mutable_models() {
  // @@protoc_insertion_point(field_mutable:flexe.TTRequest.models)
  return _internal_mutable_models();
}
inline const std::string& TTRequest::_internal_models() const {
  return models_.Get();
}
inline void TTRequest::_internal_set_models(const std::string& value) {
  
  models_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TTRequest::_internal_mutable_models() {
  
  return models_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TTRequest::release_models() {
  // @@protoc_insertion_point(field_release:flexe.TTRequest.models)
  return models_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TTRequest::set_allocated_models(std::string* models) {
  if (models != nullptr) {
    
  } else {
    
  }
  models_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), models,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.TTRequest.models)
}

// string msg = 14;
inline void TTRequest::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& TTRequest::msg() const {
  // @@protoc_insertion_point(field_get:flexe.TTRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TTRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.TTRequest.msg)
}
inline std::string* TTRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:flexe.TTRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& TTRequest::_internal_msg() const {
  return msg_.Get();
}
inline void TTRequest::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TTRequest::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TTRequest::release_msg() {
  // @@protoc_insertion_point(field_release:flexe.TTRequest.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TTRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.TTRequest.msg)
}

// -------------------------------------------------------------------

// AggregationRequest

// int32 idEntity = 1;
inline void AggregationRequest::clear_identity() {
  identity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregationRequest::_internal_identity() const {
  return identity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregationRequest::identity() const {
  // @@protoc_insertion_point(field_get:flexe.AggregationRequest.idEntity)
  return _internal_identity();
}
inline void AggregationRequest::_internal_set_identity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  identity_ = value;
}
inline void AggregationRequest::set_identity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_identity(value);
  // @@protoc_insertion_point(field_set:flexe.AggregationRequest.idEntity)
}

// string model = 2;
inline void AggregationRequest::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& AggregationRequest::model() const {
  // @@protoc_insertion_point(field_get:flexe.AggregationRequest.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AggregationRequest::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.AggregationRequest.model)
}
inline std::string* AggregationRequest::mutable_model() {
  // @@protoc_insertion_point(field_mutable:flexe.AggregationRequest.model)
  return _internal_mutable_model();
}
inline const std::string& AggregationRequest::_internal_model() const {
  return model_.Get();
}
inline void AggregationRequest::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AggregationRequest::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AggregationRequest::release_model() {
  // @@protoc_insertion_point(field_release:flexe.AggregationRequest.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AggregationRequest::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.AggregationRequest.model)
}

// string dataset = 3;
inline void AggregationRequest::clear_dataset() {
  dataset_.ClearToEmpty();
}
inline const std::string& AggregationRequest::dataset() const {
  // @@protoc_insertion_point(field_get:flexe.AggregationRequest.dataset)
  return _internal_dataset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AggregationRequest::set_dataset(ArgT0&& arg0, ArgT... args) {
 
 dataset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.AggregationRequest.dataset)
}
inline std::string* AggregationRequest::mutable_dataset() {
  // @@protoc_insertion_point(field_mutable:flexe.AggregationRequest.dataset)
  return _internal_mutable_dataset();
}
inline const std::string& AggregationRequest::_internal_dataset() const {
  return dataset_.Get();
}
inline void AggregationRequest::_internal_set_dataset(const std::string& value) {
  
  dataset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AggregationRequest::_internal_mutable_dataset() {
  
  return dataset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AggregationRequest::release_dataset() {
  // @@protoc_insertion_point(field_release:flexe.AggregationRequest.dataset)
  return dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AggregationRequest::set_allocated_dataset(std::string* dataset) {
  if (dataset != nullptr) {
    
  } else {
    
  }
  dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.AggregationRequest.dataset)
}

// string scenario = 4;
inline void AggregationRequest::clear_scenario() {
  scenario_.ClearToEmpty();
}
inline const std::string& AggregationRequest::scenario() const {
  // @@protoc_insertion_point(field_get:flexe.AggregationRequest.scenario)
  return _internal_scenario();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AggregationRequest::set_scenario(ArgT0&& arg0, ArgT... args) {
 
 scenario_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.AggregationRequest.scenario)
}
inline std::string* AggregationRequest::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:flexe.AggregationRequest.scenario)
  return _internal_mutable_scenario();
}
inline const std::string& AggregationRequest::_internal_scenario() const {
  return scenario_.Get();
}
inline void AggregationRequest::_internal_set_scenario(const std::string& value) {
  
  scenario_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AggregationRequest::_internal_mutable_scenario() {
  
  return scenario_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AggregationRequest::release_scenario() {
  // @@protoc_insertion_point(field_release:flexe.AggregationRequest.scenario)
  return scenario_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AggregationRequest::set_allocated_scenario(std::string* scenario) {
  if (scenario != nullptr) {
    
  } else {
    
  }
  scenario_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenario,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.AggregationRequest.scenario)
}

// int32 seed = 5;
inline void AggregationRequest::clear_seed() {
  seed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregationRequest::_internal_seed() const {
  return seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregationRequest::seed() const {
  // @@protoc_insertion_point(field_get:flexe.AggregationRequest.seed)
  return _internal_seed();
}
inline void AggregationRequest::_internal_set_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seed_ = value;
}
inline void AggregationRequest::set_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:flexe.AggregationRequest.seed)
}

// bool nonIID = 6;
inline void AggregationRequest::clear_noniid() {
  noniid_ = false;
}
inline bool AggregationRequest::_internal_noniid() const {
  return noniid_;
}
inline bool AggregationRequest::noniid() const {
  // @@protoc_insertion_point(field_get:flexe.AggregationRequest.nonIID)
  return _internal_noniid();
}
inline void AggregationRequest::_internal_set_noniid(bool value) {
  
  noniid_ = value;
}
inline void AggregationRequest::set_noniid(bool value) {
  _internal_set_noniid(value);
  // @@protoc_insertion_point(field_set:flexe.AggregationRequest.nonIID)
}

// int32 idModel = 7;
inline void AggregationRequest::clear_idmodel() {
  idmodel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregationRequest::_internal_idmodel() const {
  return idmodel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregationRequest::idmodel() const {
  // @@protoc_insertion_point(field_get:flexe.AggregationRequest.idModel)
  return _internal_idmodel();
}
inline void AggregationRequest::_internal_set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idmodel_ = value;
}
inline void AggregationRequest::set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idmodel(value);
  // @@protoc_insertion_point(field_set:flexe.AggregationRequest.idModel)
}

// int32 numClients = 8;
inline void AggregationRequest::clear_numclients() {
  numclients_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregationRequest::_internal_numclients() const {
  return numclients_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregationRequest::numclients() const {
  // @@protoc_insertion_point(field_get:flexe.AggregationRequest.numClients)
  return _internal_numclients();
}
inline void AggregationRequest::_internal_set_numclients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numclients_ = value;
}
inline void AggregationRequest::set_numclients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numclients(value);
  // @@protoc_insertion_point(field_set:flexe.AggregationRequest.numClients)
}

// string numExamples = 9;
inline void AggregationRequest::clear_numexamples() {
  numexamples_.ClearToEmpty();
}
inline const std::string& AggregationRequest::numexamples() const {
  // @@protoc_insertion_point(field_get:flexe.AggregationRequest.numExamples)
  return _internal_numexamples();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AggregationRequest::set_numexamples(ArgT0&& arg0, ArgT... args) {
 
 numexamples_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.AggregationRequest.numExamples)
}
inline std::string* AggregationRequest::mutable_numexamples() {
  // @@protoc_insertion_point(field_mutable:flexe.AggregationRequest.numExamples)
  return _internal_mutable_numexamples();
}
inline const std::string& AggregationRequest::_internal_numexamples() const {
  return numexamples_.Get();
}
inline void AggregationRequest::_internal_set_numexamples(const std::string& value) {
  
  numexamples_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AggregationRequest::_internal_mutable_numexamples() {
  
  return numexamples_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AggregationRequest::release_numexamples() {
  // @@protoc_insertion_point(field_release:flexe.AggregationRequest.numExamples)
  return numexamples_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AggregationRequest::set_allocated_numexamples(std::string* numexamples) {
  if (numexamples != nullptr) {
    
  } else {
    
  }
  numexamples_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), numexamples,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.AggregationRequest.numExamples)
}

// string models = 10;
inline void AggregationRequest::clear_models() {
  models_.ClearToEmpty();
}
inline const std::string& AggregationRequest::models() const {
  // @@protoc_insertion_point(field_get:flexe.AggregationRequest.models)
  return _internal_models();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AggregationRequest::set_models(ArgT0&& arg0, ArgT... args) {
 
 models_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.AggregationRequest.models)
}
inline std::string* AggregationRequest::mutable_models() {
  // @@protoc_insertion_point(field_mutable:flexe.AggregationRequest.models)
  return _internal_mutable_models();
}
inline const std::string& AggregationRequest::_internal_models() const {
  return models_.Get();
}
inline void AggregationRequest::_internal_set_models(const std::string& value) {
  
  models_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AggregationRequest::_internal_mutable_models() {
  
  return models_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AggregationRequest::release_models() {
  // @@protoc_insertion_point(field_release:flexe.AggregationRequest.models)
  return models_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AggregationRequest::set_allocated_models(std::string* models) {
  if (models != nullptr) {
    
  } else {
    
  }
  models_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), models,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.AggregationRequest.models)
}

// string strategy = 11;
inline void AggregationRequest::clear_strategy() {
  strategy_.ClearToEmpty();
}
inline const std::string& AggregationRequest::strategy() const {
  // @@protoc_insertion_point(field_get:flexe.AggregationRequest.strategy)
  return _internal_strategy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AggregationRequest::set_strategy(ArgT0&& arg0, ArgT... args) {
 
 strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.AggregationRequest.strategy)
}
inline std::string* AggregationRequest::mutable_strategy() {
  // @@protoc_insertion_point(field_mutable:flexe.AggregationRequest.strategy)
  return _internal_mutable_strategy();
}
inline const std::string& AggregationRequest::_internal_strategy() const {
  return strategy_.Get();
}
inline void AggregationRequest::_internal_set_strategy(const std::string& value) {
  
  strategy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AggregationRequest::_internal_mutable_strategy() {
  
  return strategy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AggregationRequest::release_strategy() {
  // @@protoc_insertion_point(field_release:flexe.AggregationRequest.strategy)
  return strategy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AggregationRequest::set_allocated_strategy(std::string* strategy) {
  if (strategy != nullptr) {
    
  } else {
    
  }
  strategy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strategy,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.AggregationRequest.strategy)
}

// string msg = 12;
inline void AggregationRequest::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& AggregationRequest::msg() const {
  // @@protoc_insertion_point(field_get:flexe.AggregationRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AggregationRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.AggregationRequest.msg)
}
inline std::string* AggregationRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:flexe.AggregationRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& AggregationRequest::_internal_msg() const {
  return msg_.Get();
}
inline void AggregationRequest::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AggregationRequest::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AggregationRequest::release_msg() {
  // @@protoc_insertion_point(field_release:flexe.AggregationRequest.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AggregationRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.AggregationRequest.msg)
}

// -------------------------------------------------------------------

// GenericRequest

// int32 idEntity = 1;
inline void GenericRequest::clear_identity() {
  identity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericRequest::_internal_identity() const {
  return identity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericRequest::identity() const {
  // @@protoc_insertion_point(field_get:flexe.GenericRequest.idEntity)
  return _internal_identity();
}
inline void GenericRequest::_internal_set_identity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  identity_ = value;
}
inline void GenericRequest::set_identity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_identity(value);
  // @@protoc_insertion_point(field_set:flexe.GenericRequest.idEntity)
}

// string model = 2;
inline void GenericRequest::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& GenericRequest::model() const {
  // @@protoc_insertion_point(field_get:flexe.GenericRequest.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericRequest::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.GenericRequest.model)
}
inline std::string* GenericRequest::mutable_model() {
  // @@protoc_insertion_point(field_mutable:flexe.GenericRequest.model)
  return _internal_mutable_model();
}
inline const std::string& GenericRequest::_internal_model() const {
  return model_.Get();
}
inline void GenericRequest::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericRequest::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericRequest::release_model() {
  // @@protoc_insertion_point(field_release:flexe.GenericRequest.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericRequest::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.GenericRequest.model)
}

// string dataset = 3;
inline void GenericRequest::clear_dataset() {
  dataset_.ClearToEmpty();
}
inline const std::string& GenericRequest::dataset() const {
  // @@protoc_insertion_point(field_get:flexe.GenericRequest.dataset)
  return _internal_dataset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericRequest::set_dataset(ArgT0&& arg0, ArgT... args) {
 
 dataset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.GenericRequest.dataset)
}
inline std::string* GenericRequest::mutable_dataset() {
  // @@protoc_insertion_point(field_mutable:flexe.GenericRequest.dataset)
  return _internal_mutable_dataset();
}
inline const std::string& GenericRequest::_internal_dataset() const {
  return dataset_.Get();
}
inline void GenericRequest::_internal_set_dataset(const std::string& value) {
  
  dataset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericRequest::_internal_mutable_dataset() {
  
  return dataset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericRequest::release_dataset() {
  // @@protoc_insertion_point(field_release:flexe.GenericRequest.dataset)
  return dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericRequest::set_allocated_dataset(std::string* dataset) {
  if (dataset != nullptr) {
    
  } else {
    
  }
  dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.GenericRequest.dataset)
}

// string scenario = 4;
inline void GenericRequest::clear_scenario() {
  scenario_.ClearToEmpty();
}
inline const std::string& GenericRequest::scenario() const {
  // @@protoc_insertion_point(field_get:flexe.GenericRequest.scenario)
  return _internal_scenario();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericRequest::set_scenario(ArgT0&& arg0, ArgT... args) {
 
 scenario_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.GenericRequest.scenario)
}
inline std::string* GenericRequest::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:flexe.GenericRequest.scenario)
  return _internal_mutable_scenario();
}
inline const std::string& GenericRequest::_internal_scenario() const {
  return scenario_.Get();
}
inline void GenericRequest::_internal_set_scenario(const std::string& value) {
  
  scenario_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericRequest::_internal_mutable_scenario() {
  
  return scenario_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericRequest::release_scenario() {
  // @@protoc_insertion_point(field_release:flexe.GenericRequest.scenario)
  return scenario_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericRequest::set_allocated_scenario(std::string* scenario) {
  if (scenario != nullptr) {
    
  } else {
    
  }
  scenario_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenario,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.GenericRequest.scenario)
}

// int32 seed = 5;
inline void GenericRequest::clear_seed() {
  seed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericRequest::_internal_seed() const {
  return seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericRequest::seed() const {
  // @@protoc_insertion_point(field_get:flexe.GenericRequest.seed)
  return _internal_seed();
}
inline void GenericRequest::_internal_set_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seed_ = value;
}
inline void GenericRequest::set_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:flexe.GenericRequest.seed)
}

// bool nonIID = 6;
inline void GenericRequest::clear_noniid() {
  noniid_ = false;
}
inline bool GenericRequest::_internal_noniid() const {
  return noniid_;
}
inline bool GenericRequest::noniid() const {
  // @@protoc_insertion_point(field_get:flexe.GenericRequest.nonIID)
  return _internal_noniid();
}
inline void GenericRequest::_internal_set_noniid(bool value) {
  
  noniid_ = value;
}
inline void GenericRequest::set_noniid(bool value) {
  _internal_set_noniid(value);
  // @@protoc_insertion_point(field_set:flexe.GenericRequest.nonIID)
}

// int32 idModel = 7;
inline void GenericRequest::clear_idmodel() {
  idmodel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericRequest::_internal_idmodel() const {
  return idmodel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericRequest::idmodel() const {
  // @@protoc_insertion_point(field_get:flexe.GenericRequest.idModel)
  return _internal_idmodel();
}
inline void GenericRequest::_internal_set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idmodel_ = value;
}
inline void GenericRequest::set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idmodel(value);
  // @@protoc_insertion_point(field_set:flexe.GenericRequest.idModel)
}

// string msg = 8;
inline void GenericRequest::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& GenericRequest::msg() const {
  // @@protoc_insertion_point(field_get:flexe.GenericRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.GenericRequest.msg)
}
inline std::string* GenericRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:flexe.GenericRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& GenericRequest::_internal_msg() const {
  return msg_.Get();
}
inline void GenericRequest::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericRequest::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericRequest::release_msg() {
  // @@protoc_insertion_point(field_release:flexe.GenericRequest.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.GenericRequest.msg)
}

// -------------------------------------------------------------------

// GenericReply

// int32 idEntity = 1;
inline void GenericReply::clear_identity() {
  identity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericReply::_internal_identity() const {
  return identity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericReply::identity() const {
  // @@protoc_insertion_point(field_get:flexe.GenericReply.idEntity)
  return _internal_identity();
}
inline void GenericReply::_internal_set_identity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  identity_ = value;
}
inline void GenericReply::set_identity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_identity(value);
  // @@protoc_insertion_point(field_set:flexe.GenericReply.idEntity)
}

// string model = 2;
inline void GenericReply::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& GenericReply::model() const {
  // @@protoc_insertion_point(field_get:flexe.GenericReply.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericReply::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.GenericReply.model)
}
inline std::string* GenericReply::mutable_model() {
  // @@protoc_insertion_point(field_mutable:flexe.GenericReply.model)
  return _internal_mutable_model();
}
inline const std::string& GenericReply::_internal_model() const {
  return model_.Get();
}
inline void GenericReply::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericReply::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericReply::release_model() {
  // @@protoc_insertion_point(field_release:flexe.GenericReply.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericReply::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.GenericReply.model)
}

// string dataset = 3;
inline void GenericReply::clear_dataset() {
  dataset_.ClearToEmpty();
}
inline const std::string& GenericReply::dataset() const {
  // @@protoc_insertion_point(field_get:flexe.GenericReply.dataset)
  return _internal_dataset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericReply::set_dataset(ArgT0&& arg0, ArgT... args) {
 
 dataset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.GenericReply.dataset)
}
inline std::string* GenericReply::mutable_dataset() {
  // @@protoc_insertion_point(field_mutable:flexe.GenericReply.dataset)
  return _internal_mutable_dataset();
}
inline const std::string& GenericReply::_internal_dataset() const {
  return dataset_.Get();
}
inline void GenericReply::_internal_set_dataset(const std::string& value) {
  
  dataset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericReply::_internal_mutable_dataset() {
  
  return dataset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericReply::release_dataset() {
  // @@protoc_insertion_point(field_release:flexe.GenericReply.dataset)
  return dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericReply::set_allocated_dataset(std::string* dataset) {
  if (dataset != nullptr) {
    
  } else {
    
  }
  dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.GenericReply.dataset)
}

// string scenario = 4;
inline void GenericReply::clear_scenario() {
  scenario_.ClearToEmpty();
}
inline const std::string& GenericReply::scenario() const {
  // @@protoc_insertion_point(field_get:flexe.GenericReply.scenario)
  return _internal_scenario();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericReply::set_scenario(ArgT0&& arg0, ArgT... args) {
 
 scenario_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.GenericReply.scenario)
}
inline std::string* GenericReply::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:flexe.GenericReply.scenario)
  return _internal_mutable_scenario();
}
inline const std::string& GenericReply::_internal_scenario() const {
  return scenario_.Get();
}
inline void GenericReply::_internal_set_scenario(const std::string& value) {
  
  scenario_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericReply::_internal_mutable_scenario() {
  
  return scenario_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericReply::release_scenario() {
  // @@protoc_insertion_point(field_release:flexe.GenericReply.scenario)
  return scenario_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericReply::set_allocated_scenario(std::string* scenario) {
  if (scenario != nullptr) {
    
  } else {
    
  }
  scenario_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenario,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.GenericReply.scenario)
}

// int32 seed = 5;
inline void GenericReply::clear_seed() {
  seed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericReply::_internal_seed() const {
  return seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericReply::seed() const {
  // @@protoc_insertion_point(field_get:flexe.GenericReply.seed)
  return _internal_seed();
}
inline void GenericReply::_internal_set_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seed_ = value;
}
inline void GenericReply::set_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:flexe.GenericReply.seed)
}

// bool nonIID = 6;
inline void GenericReply::clear_noniid() {
  noniid_ = false;
}
inline bool GenericReply::_internal_noniid() const {
  return noniid_;
}
inline bool GenericReply::noniid() const {
  // @@protoc_insertion_point(field_get:flexe.GenericReply.nonIID)
  return _internal_noniid();
}
inline void GenericReply::_internal_set_noniid(bool value) {
  
  noniid_ = value;
}
inline void GenericReply::set_noniid(bool value) {
  _internal_set_noniid(value);
  // @@protoc_insertion_point(field_set:flexe.GenericReply.nonIID)
}

// int32 idModel = 7;
inline void GenericReply::clear_idmodel() {
  idmodel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericReply::_internal_idmodel() const {
  return idmodel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericReply::idmodel() const {
  // @@protoc_insertion_point(field_get:flexe.GenericReply.idModel)
  return _internal_idmodel();
}
inline void GenericReply::_internal_set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idmodel_ = value;
}
inline void GenericReply::set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idmodel(value);
  // @@protoc_insertion_point(field_set:flexe.GenericReply.idModel)
}

// int32 reply = 8;
inline void GenericReply::clear_reply() {
  reply_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericReply::_internal_reply() const {
  return reply_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenericReply::reply() const {
  // @@protoc_insertion_point(field_get:flexe.GenericReply.reply)
  return _internal_reply();
}
inline void GenericReply::_internal_set_reply(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reply_ = value;
}
inline void GenericReply::set_reply(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:flexe.GenericReply.reply)
}

// string msg = 9;
inline void GenericReply::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& GenericReply::msg() const {
  // @@protoc_insertion_point(field_get:flexe.GenericReply.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericReply::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.GenericReply.msg)
}
inline std::string* GenericReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:flexe.GenericReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& GenericReply::_internal_msg() const {
  return msg_.Get();
}
inline void GenericReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenericReply::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenericReply::release_msg() {
  // @@protoc_insertion_point(field_release:flexe.GenericReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenericReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.GenericReply.msg)
}

// -------------------------------------------------------------------

// ModelReply

// int32 idEntity = 1;
inline void ModelReply::clear_identity() {
  identity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelReply::_internal_identity() const {
  return identity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelReply::identity() const {
  // @@protoc_insertion_point(field_get:flexe.ModelReply.idEntity)
  return _internal_identity();
}
inline void ModelReply::_internal_set_identity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  identity_ = value;
}
inline void ModelReply::set_identity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_identity(value);
  // @@protoc_insertion_point(field_set:flexe.ModelReply.idEntity)
}

// string model = 2;
inline void ModelReply::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& ModelReply::model() const {
  // @@protoc_insertion_point(field_get:flexe.ModelReply.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelReply::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.ModelReply.model)
}
inline std::string* ModelReply::mutable_model() {
  // @@protoc_insertion_point(field_mutable:flexe.ModelReply.model)
  return _internal_mutable_model();
}
inline const std::string& ModelReply::_internal_model() const {
  return model_.Get();
}
inline void ModelReply::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelReply::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelReply::release_model() {
  // @@protoc_insertion_point(field_release:flexe.ModelReply.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelReply::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.ModelReply.model)
}

// string dataset = 3;
inline void ModelReply::clear_dataset() {
  dataset_.ClearToEmpty();
}
inline const std::string& ModelReply::dataset() const {
  // @@protoc_insertion_point(field_get:flexe.ModelReply.dataset)
  return _internal_dataset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelReply::set_dataset(ArgT0&& arg0, ArgT... args) {
 
 dataset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.ModelReply.dataset)
}
inline std::string* ModelReply::mutable_dataset() {
  // @@protoc_insertion_point(field_mutable:flexe.ModelReply.dataset)
  return _internal_mutable_dataset();
}
inline const std::string& ModelReply::_internal_dataset() const {
  return dataset_.Get();
}
inline void ModelReply::_internal_set_dataset(const std::string& value) {
  
  dataset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelReply::_internal_mutable_dataset() {
  
  return dataset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelReply::release_dataset() {
  // @@protoc_insertion_point(field_release:flexe.ModelReply.dataset)
  return dataset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelReply::set_allocated_dataset(std::string* dataset) {
  if (dataset != nullptr) {
    
  } else {
    
  }
  dataset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.ModelReply.dataset)
}

// string scenario = 4;
inline void ModelReply::clear_scenario() {
  scenario_.ClearToEmpty();
}
inline const std::string& ModelReply::scenario() const {
  // @@protoc_insertion_point(field_get:flexe.ModelReply.scenario)
  return _internal_scenario();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelReply::set_scenario(ArgT0&& arg0, ArgT... args) {
 
 scenario_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.ModelReply.scenario)
}
inline std::string* ModelReply::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:flexe.ModelReply.scenario)
  return _internal_mutable_scenario();
}
inline const std::string& ModelReply::_internal_scenario() const {
  return scenario_.Get();
}
inline void ModelReply::_internal_set_scenario(const std::string& value) {
  
  scenario_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelReply::_internal_mutable_scenario() {
  
  return scenario_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelReply::release_scenario() {
  // @@protoc_insertion_point(field_release:flexe.ModelReply.scenario)
  return scenario_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelReply::set_allocated_scenario(std::string* scenario) {
  if (scenario != nullptr) {
    
  } else {
    
  }
  scenario_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenario,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.ModelReply.scenario)
}

// int32 seed = 5;
inline void ModelReply::clear_seed() {
  seed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelReply::_internal_seed() const {
  return seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelReply::seed() const {
  // @@protoc_insertion_point(field_get:flexe.ModelReply.seed)
  return _internal_seed();
}
inline void ModelReply::_internal_set_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seed_ = value;
}
inline void ModelReply::set_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:flexe.ModelReply.seed)
}

// bool nonIID = 6;
inline void ModelReply::clear_noniid() {
  noniid_ = false;
}
inline bool ModelReply::_internal_noniid() const {
  return noniid_;
}
inline bool ModelReply::noniid() const {
  // @@protoc_insertion_point(field_get:flexe.ModelReply.nonIID)
  return _internal_noniid();
}
inline void ModelReply::_internal_set_noniid(bool value) {
  
  noniid_ = value;
}
inline void ModelReply::set_noniid(bool value) {
  _internal_set_noniid(value);
  // @@protoc_insertion_point(field_set:flexe.ModelReply.nonIID)
}

// int32 idModel = 7;
inline void ModelReply::clear_idmodel() {
  idmodel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelReply::_internal_idmodel() const {
  return idmodel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelReply::idmodel() const {
  // @@protoc_insertion_point(field_get:flexe.ModelReply.idModel)
  return _internal_idmodel();
}
inline void ModelReply::_internal_set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idmodel_ = value;
}
inline void ModelReply::set_idmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idmodel(value);
  // @@protoc_insertion_point(field_set:flexe.ModelReply.idModel)
}

// int32 numExamples = 8;
inline void ModelReply::clear_numexamples() {
  numexamples_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelReply::_internal_numexamples() const {
  return numexamples_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelReply::numexamples() const {
  // @@protoc_insertion_point(field_get:flexe.ModelReply.numExamples)
  return _internal_numexamples();
}
inline void ModelReply::_internal_set_numexamples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numexamples_ = value;
}
inline void ModelReply::set_numexamples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numexamples(value);
  // @@protoc_insertion_point(field_set:flexe.ModelReply.numExamples)
}

// double entropy = 9;
inline void ModelReply::clear_entropy() {
  entropy_ = 0;
}
inline double ModelReply::_internal_entropy() const {
  return entropy_;
}
inline double ModelReply::entropy() const {
  // @@protoc_insertion_point(field_get:flexe.ModelReply.entropy)
  return _internal_entropy();
}
inline void ModelReply::_internal_set_entropy(double value) {
  
  entropy_ = value;
}
inline void ModelReply::set_entropy(double value) {
  _internal_set_entropy(value);
  // @@protoc_insertion_point(field_set:flexe.ModelReply.entropy)
}

// double loss = 10;
inline void ModelReply::clear_loss() {
  loss_ = 0;
}
inline double ModelReply::_internal_loss() const {
  return loss_;
}
inline double ModelReply::loss() const {
  // @@protoc_insertion_point(field_get:flexe.ModelReply.loss)
  return _internal_loss();
}
inline void ModelReply::_internal_set_loss(double value) {
  
  loss_ = value;
}
inline void ModelReply::set_loss(double value) {
  _internal_set_loss(value);
  // @@protoc_insertion_point(field_set:flexe.ModelReply.loss)
}

// double accuracy = 11;
inline void ModelReply::clear_accuracy() {
  accuracy_ = 0;
}
inline double ModelReply::_internal_accuracy() const {
  return accuracy_;
}
inline double ModelReply::accuracy() const {
  // @@protoc_insertion_point(field_get:flexe.ModelReply.accuracy)
  return _internal_accuracy();
}
inline void ModelReply::_internal_set_accuracy(double value) {
  
  accuracy_ = value;
}
inline void ModelReply::set_accuracy(double value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:flexe.ModelReply.accuracy)
}

// string msg = 12;
inline void ModelReply::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ModelReply::msg() const {
  // @@protoc_insertion_point(field_get:flexe.ModelReply.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelReply::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flexe.ModelReply.msg)
}
inline std::string* ModelReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:flexe.ModelReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& ModelReply::_internal_msg() const {
  return msg_.Get();
}
inline void ModelReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelReply::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelReply::release_msg() {
  // @@protoc_insertion_point(field_release:flexe.ModelReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flexe.ModelReply.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace flexe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flexe_2eproto
